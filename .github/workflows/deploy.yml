name: Deploy
env:
  environment: production
  region: us-east-1
on:
  push:
    branches: [master]
jobs:
  prepare:
    name: Prepare Deploy PythonApp
    runs-on: ubuntu-latest
    outputs:
      APPLICATION: ${{ steps.var-application.outputs.APPLICATION }}
      SHA_SHORT: ${{ steps.var-sha-short.outputs.SHA_SHORT }}
      IMAGE_VERSION: ${{ steps.var-image-version.outputs.IMAGE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Variable SHA_SHORT
        id: var-sha-short
        run: |
          echo ::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)
      - name: Variable IMAGE_VERSION
        id: var-image-version
        run: |
          echo ::set-output name=IMAGE_VERSION::latest
      - name: Variable APPLICATION
        id: var-application
        run: |
          echo ::set-output name=APPLICATION::pythonapp
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: pyartifact
          path: |
            .
          if-no-files-found: error
  build:
    name: Build Docker Image PythonApp
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      IMAGE_TAG: ${{ steps.docker-vars.outputs.IMAGE_TAG }}
    steps:
      #- name: Checkout
      #  uses: actions/checkout@v1
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: pyartifact
      - name: Docker Login
        uses: docker/login-action@v1.6.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_USERNAME_PASSWORD }}
      - name: Variable IMAGE_TAG
        id: docker-vars
        run: |
          echo ::set-output name=IMAGE_TAG::ghcr.io/${{ github.repository_owner }}/${{ needs.prepare.outputs.APPLICATION }}:${{ needs.prepare.outputs.IMAGE_VERSION }}
      - name: Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true
      - name: Generate Image and Push to Registry
        uses: docker/build-push-action@v2.2.0
        with:
          tags: ${{ steps.docker-vars.outputs.IMAGE_TAG }}
          context: .
          push: true
          builder: ${{ steps.buildx.outputs.name }}
    deploy:
      name: Deploy to k8s
      needs: [prepare, build]
      runs-on: ubuntu-latest
      steps:
        - name: Upload Manifests
          uses: actions/download-artifact@v2
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.region }}
        - name: Install Kubectl
          uses: azure/setup-kubectl@v1
        - name: Update KubeConfig
          run: |
            aws eks update-kubeconfig --name ddo
        - name: Apply Manifests
          run: |
            kubectl apply -f manifests
        - name: Variable DEPLOYMENT
          id: var-deployment
          run: >-
            echo ::set-output name=DEPLOYMENT::$(kubectl get deployments -l app=${{ needs.prepare.outputs.APPLICATION }} -o name -n apps)
        - name: Force Pull Image
          run: >-
            kubectl patch ${{ steps.var-deployment.outputs.DEPLOYMENT }} -p
            "{\"spec\": {\"template\": {\"metadata\": {\"annotations\": {\"commit\": \"${{ needs.prepare.outputs.SHA_SHORT }}\"}}}}}"
            -n apps
      verify-deployment:
        - name: Verify Deployment
          needs: [build, deploy]
          runs-on: ubuntu-latest
          steps:
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.region }}
            - name: Install Kubectl
              uses: azure/setup-kubectl@v1
            - name: Update KubeConfig
              run: |
                aws eks update-kubeconfig --name ddo
            - name: Validate Deployment
              run: |
                kubectl rollout status deployment ${{ needs.prepare.outputs.APPLICATION }}
